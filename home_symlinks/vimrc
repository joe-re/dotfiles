if &compatible
  set nocompatible
endif

let s:dein_dir = expand('~/.config/nvim')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
set runtimepath^=~/.config/nvim/repos/github.com/Shougo/dein.vim

call dein#begin(s:dein_dir)

call dein#add(s:dein_dir)
call dein#add('Shougo/vimproc.vim', {'build': 'make'})
call dein#add('Shougo/unite.vim')
call dein#add('Shougo/neomru.vim')
call dein#add('scrooloose/nerdtree')
call dein#add('Shougo/deoplete.nvim')
call dein#add('jiangmiao/simple-javascript-indenter')
call dein#add('tpope/vim-fugitive')
call dein#add('kannokanno/previm')
call dein#add('tpope/vim-endwise')
call dein#add('tpope/vim-surround')
call dein#add('kana/vim-submode')
call dein#add('othree/html5.vim')
call dein#add('h1mesuke/vim-alignta')
call dein#add('Xuyuanp/nerdtree-git-plugin')
call dein#add('kchmck/vim-coffee-script')
call dein#add('Shougo/vimfiler.vim')
call dein#add('tpope/vim-rails')
call dein#add('kien/ctrlp.vim')
call dein#add('alvan/vim-closetag')
call dein#add('facebook/vim-flow', {'autoload': {'filetypes': 'javascript'}})
call dein#add('basyura/unite-rails')
call dein#add('leafgarland/typescript-vim')
call dein#add('Quramy/tsuquyomi')
call dein#add('neomake/neomake')
call dein#add('fatih/vim-go')
call dein#end()

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on

filetype indent on
syntax on

nnoremap <C-e> :<c-u>:NERDTreeToggle ./<cr>
nnoremap ,er :<C-u>:NERDTreeFind<CR>

" neocomplete用設定
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#keyword_patterns')
	let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
let neocomplete#enable_insert_char_pre=1 "インサートモード時のカーソル移動で補完されないようにする。

" 行番号を表示
set number

set clipboard& clipboard+=unnamed
" VisualModeで選択したテキストをクリップボードに入れる
set guioptions& guioptions+=a

colorscheme elflord

"" js用インデント
" この設定入れるとshiftwidthを1にしてインデントしてくれる
let g:SimpleJsIndenter_BriefMode = 1
" この設定入れるとswitchのインデントがいくらかマシに
let g:SimpleJsIndenter_CaseIndentLevel = -1

" hbsファイルにhtmlのシンタックスが効くように設定
""au BufNewFile,BufRead *.hbs set filetype=html

" html5に対応
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1

" インデントの設定
set tabstop=2
set shiftwidth=2
set expandtab
augroup vimrc
  autocmd! FileType perl setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType css  setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType ruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType eruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4
augroup END

set imdisable

scriptencoding utf-8
" 行末の空白文字を可視化
highlight WhitespaceEOL term=underline ctermbg=red guibg=red
au BufWinEnter * let w:m1 = matchadd("WhitespaceEOL", '\s\+$')
au WinEnter * let w:m1 = matchadd("WhitespaceEOL", '\s\+$')

" 行頭のTAB文字を可視化
highlight TabString ctermbg=red guibg=red
au BufWinEnter * let w:m2 = matchadd("TabString", '^\t+')
au WinEnter * let w:m2 = matchadd("TabString", '^\t+')

" 全角スペースの表示
highlight ZenkakuSpace term=underline ctermbg=LightMagenta guibg=LightMagenta
au BufWinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')
au WinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')

source $VIMRUNTIME/macros/matchit.vim

let g:vim_tags_project_tags_command = "/Applications/MacVim.app/Contents/MacOS/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = "/Applications/MacVim.app/Contents/MacOS/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"

set backupdir=$HOME/.vim-backup
set directory=$HOME/.vim-backup
set noswapfile

let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)


let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
"nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> ,uu :<C-u>Unite file_mru buffer<CR>
nnoremap <silent> ,ur :<C-u>Unite file_rec/async<CR>
nnoremap <silent> ,ut :<C-u>Unite tab<CR>

augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END

" 挿入モードでのカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-a> <HOME>
inoremap <C-e> <END>

let g:unite_split_rule = 'botright'
nnoremap <silent> ,uo       : <C-u>Unite -no-quit -vertical -winwidth=30 outline<CR>

"clipboardに入らないようにする
"use black hole register
noremap c "_c
noremap C "_C

" ESC2回でハイライトを消す
set hlsearch
nmap <Esc><Esc> :nohlsearch<CR>

nnoremap ; :

" yankした文字をテキストオブジェクトを使ってリプレイスできるようにする
map R  <Plug>(operator-replace)

" Window Sizeの変更モードを定義
call submode#enter_with('winsize', 'n', '', '<C-w>L', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w>H', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>J', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>K', '<C-w>-')
call submode#map('winsize', 'n', '', 'L', '<C-w>>')
call submode#map('winsize', 'n', '', 'H', '<C-w><')
call submode#map('winsize', 'n', '', 'J', '<C-w>+')
call submode#map('winsize', 'n', '', 'K', '<C-w>-')

" grepにhwを使う
nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer -no-quit -winheight=10<CR>
if executable('hw')
  let g:unite_source_grep_command = 'hw'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
endif

let g:calendar_google_calendar = 1
let g:calendar_google_task = 1

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" vimfilter
let g:vimfiler_as_default_explorer = 1
nnoremap ,ue :VimFilerExplore -split -winwidth=30 -find -no-quit<Cr>
nnoremap ,e :VimFiler<Cr>

" trim space of line end
function! Sweep_trail()
  %substitute/\s\+$//e
endfunction
" autocmd BufWritePre * call Sweep_trail()

" close tag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.erb"

" enable html tag jump
runtime macros/matchit.vim

" git manipulation
nnoremap <silent> gw :<C-u>Gwrite<CR>
nnoremap <silent> gc :<C-u>Gcommit<CR>
nnoremap <silent> gcp :<C-u>Gcommit -p<CR>
nnoremap <silent> gcv :<C-u>Gcommit -v<CR>
nnoremap <silent> gca :<C-u>Gcommit --amend<CR>
nnoremap <silent> gd :<C-u>Gdiff<CR>
nnoremap <silent> gb :<C-u>Gblame<CR>
nnoremap <silent> gps :<C-u>Gpush<CR>
nnoremap <silent> gpl :<C-u>Gpull<CR>
nnoremap <silent> gtig :<C-u>Agit<CR>
nnoremap <silent> gl :<C-u>AgitFile<CR>
nnoremap <silent> gbr :<C-u>Merginal<CR>

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    end

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

endfunction
let g:racer_cmd="/Users/noguchimasato/.cargo/bin/racer"

" marlin
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
set rtp^="~/.opam/system/share/ocp-indent/vim"

set encoding=utf-8
set fileencodings=utf-8,sjis,euc-jp,iso-2022-jp
set fileformats=unix,mac,dos
set ambiwidth=double

" neomake
if dein#tap('neomake')
  autocmd! BufWritePost * Neomake
  let g:neomake_open_list = 2
  let g:neomake_ruby_enabled_makers = ['rubocop']
  let g:neomake_javascript_enabled_makers = ['eslint', 'flow']
  let g:neomake_html_enabled_makers = []
endif

" vim-flow
let g:flow#enable=0
