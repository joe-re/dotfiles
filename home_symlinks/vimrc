if &compatible
  set nocompatible
endif

" let s:dein_dir = expand('~/.config/nvim')
" let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'
" set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

call plug#begin('~/.vim/plugged')
Plug 'neovim/nvim-lspconfig'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'kana/vim-submode'
Plug 'scrooloose/nerdtree'
call plug#end()

" lua <<EOF
" require'nvim_lsp'.sqlls.setup{
"   cmd = {"/Users/noguchimasato/.ghq/github.com/joe-re/sql-language-server/packages/server/dist/cli.js", "up", "--method", "stdio"};
"   settings = {
"     sqlLanguageServer = {
"       lint = "hi"
"     }
"   }
" }
" EOF
  " call dein#add('neovim/nvim-lspconfig')
  " call dein#add('neoclide/coc.nvim', , {'do': 'yarn install --frozen-lockfile'})
" if dein#load_state('~/.cache/dein')
  " call dein#begin('~/.cache/dein')
  " call dein#add('~/.cache/dein')

  " call dein#add('Shougo/vimproc.vim', {'build': 'make'})
  " call dein#add('Shougo/denite.nvim')
  " call dein#add('Shougo/neomru.vim')
  " call dein#add('scrooloose/nerdtree')
  " call dein#add('Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' })
  " call dein#add('jiangmiao/simple-javascript-indenter')
  " call dein#add('tpope/vim-fugitive')
  " call dein#add('kannokanno/previm')
  " call dein#add('tpope/vim-endwise')
  " call dein#add('tpope/vim-surround')
  " call dein#add('kana/vim-submode')
  " call dein#add('othree/html5.vim')
  " call dein#add('h1mesuke/vim-alignta')
  " call dein#add('Xuyuanp/nerdtree-git-plugin')
  " call dein#add('kchmck/vim-coffee-script')
  " call dein#add('Shougo/vimfiler.vim')
  " call dein#add('tpope/vim-rails')
  " call dein#add('kien/ctrlp.vim')
  " call dein#add('alvan/vim-closetag')
  " call dein#add('basyura/unite-rails')
  " call dein#add('leafgarland/typescript-vim')
  " call dein#add('Quramy/tsuquyomi')
  " call dein#add('w0rp/ale')
  " call dein#add('wokalski/autocomplete-flow')
  " call dein#add('Shougo/neosnippet')
  " call dein#add('Shougo/neosnippet-snippets')
  " call dein#add('dart-lang/dart-vim-plugin')
  " call dein#add('flowtype/vim-flow')
  " " call dein#add('autozimu/LanguageClient-neovim', { 'do': 'bash install.sh', })
  " call dein#add('junegunn/fzf')
  " call dein#add('iamcco/markdown-preview.nvim', {'on_ft': ['markdown', 'pandoc.markdown', 'rmd'],
	" 				\ 'build': 'cd app & yarn install' })
  " call dein#add('prabirshrestha/async.vim')
  " call dein#add('prabirshrestha/vim-lsp')
  " call dein#add('neovim/nvim-lspconfig')
  " call dein#add('neoclide/coc.nvim', , {'do': 'yarn install --frozen-lockfile'})
  " call dein#end()
  " call dein#save_state()
" endif

" if dein#check_install()
"   call dein#install()
" endif

filetype plugin indent on

filetype indent on
syntax on

nnoremap <C-e> :<c-u>:NERDTreeToggle ./<cr>
nnoremap ,er :<C-u>:NERDTreeFind<CR>

" neocomplete用設定
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#keyword_patterns')
	let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
let neocomplete#enable_insert_char_pre=1 "インサートモード時のカーソル移動で補完されないようにする。

" 行番号を表示
set number

set clipboard& clipboard+=unnamed
" VisualModeで選択したテキストをクリップボードに入れる
set guioptions& guioptions+=a

colorscheme elflord

"" js用インデント
" この設定入れるとshiftwidthを1にしてインデントしてくれる
let g:SimpleJsIndenter_BriefMode = 1
" この設定入れるとswitchのインデントがいくらかマシに
let g:SimpleJsIndenter_CaseIndentLevel = -1

" hbsファイルにhtmlのシンタックスが効くように設定
""au BufNewFile,BufRead *.hbs set filetype=html

au BufNewFile,BufRead *.es6 setf javascript

" html5に対応
let g:html5_event_handler_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_aria_attributes_complete = 1

" インデントの設定
set tabstop=2
set shiftwidth=2
set expandtab
augroup vimrc
  autocmd! FileType perl setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType css  setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType ruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType eruby setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
  autocmd! FileType go setlocal noexpandtab shiftwidth=4 tabstop=4 softtabstop=4
augroup END

set imdisable

scriptencoding utf-8
" 行末の空白文字を可視化
highlight WhitespaceEOL term=underline ctermbg=red guibg=red
au BufWinEnter * let w:m1 = matchadd("WhitespaceEOL", '\s\+$')
au WinEnter * let w:m1 = matchadd("WhitespaceEOL", '\s\+$')

" 行頭のTAB文字を可視化
highlight TabString ctermbg=red guibg=red
au BufWinEnter * let w:m2 = matchadd("TabString", '^\t+')
au WinEnter * let w:m2 = matchadd("TabString", '^\t+')

" 全角スペースの表示
highlight ZenkakuSpace term=underline ctermbg=LightMagenta guibg=LightMagenta
au BufWinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')
au WinEnter * let w:m3 = matchadd("ZenkakuSpace", '　')

source $VIMRUNTIME/macros/matchit.vim

let g:vim_tags_project_tags_command = "/Applications/MacVim.app/Contents/MacOS/ctags -R {OPTIONS} {DIRECTORY} 2>/dev/null"
let g:vim_tags_gems_tags_command = "/Applications/MacVim.app/Contents/MacOS/ctags -R {OPTIONS} `bundle show --paths` 2>/dev/null"

set backupdir=$HOME/.vim-backup
set directory=$HOME/.vim-backup
set noswapfile

let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

augroup PrevimSettings
    autocmd!
    autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END

" 挿入モードでのカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-a> <HOME>
inoremap <C-e> <END>

"clipboardに入らないようにする
"use black hole register
noremap c "_c
noremap C "_C

" ESC2回でハイライトを消す
set hlsearch
nmap <Esc><Esc> :nohlsearch<CR>

nnoremap ; :

" yankした文字をテキストオブジェクトを使ってリプレイスできるようにする
map R  <Plug>(operator-replace)

" Window Sizeの変更モードを定義
call submode#enter_with('winsize', 'n', '', '<C-w>L', '<C-w>>')
call submode#enter_with('winsize', 'n', '', '<C-w>H', '<C-w><')
call submode#enter_with('winsize', 'n', '', '<C-w>J', '<C-w>+')
call submode#enter_with('winsize', 'n', '', '<C-w>K', '<C-w>-')
call submode#map('winsize', 'n', '', 'L', '<C-w>>')
call submode#map('winsize', 'n', '', 'H', '<C-w><')
call submode#map('winsize', 'n', '', 'J', '<C-w>+')
call submode#map('winsize', 'n', '', 'K', '<C-w>-')

let g:calendar_google_calendar = 1
let g:calendar_google_task = 1

set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor

" vimfilter
let g:vimfiler_as_default_explorer = 1
nnoremap ,ue :VimFilerExplore -split -winwidth=30 -find -no-quit<Cr>
nnoremap ,e :VimFiler<Cr>

" trim space of line end
function! Sweep_trail()
  %substitute/\s\+$//e
endfunction
" autocmd BufWritePre * call Sweep_trail()

" close tag
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.erb"

" enable html tag jump
runtime macros/matchit.vim

" git manipulation
nnoremap <silent> gw :<C-u>Gwrite<CR>
nnoremap <silent> gc :<C-u>Gcommit<CR>
nnoremap <silent> gcp :<C-u>Gcommit -p<CR>
nnoremap <silent> gcv :<C-u>Gcommit -v<CR>
nnoremap <silent> gca :<C-u>Gcommit --amend<CR>
nnoremap <silent> gd :<C-u>Gdiff<CR>
nnoremap <silent> gb :<C-u>Gblame<CR>
nnoremap <silent> gps :<C-u>Gpush<CR>
nnoremap <silent> gpl :<C-u>Gpull<CR>
nnoremap <silent> gtig :<C-u>Agit<CR>
nnoremap <silent> gl :<C-u>AgitFile<CR>
nnoremap <silent> gbr :<C-u>Merginal<CR>

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    end

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

endfunction
let g:racer_cmd="/Users/noguchimasato/.cargo/bin/racer"

" marlin
let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
set rtp^="~/.opam/system/share/ocp-indent/vim"

set encoding=utf-8
set fileencodings=utf-8,sjis,euc-jp,iso-2022-jp
set fileformats=unix,mac,dos
set ambiwidth=double

" ale
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_open_list = 1
let g:ale_linters = {
      \ 'javascript': ['eslint', 'flow'],
      \ 'ruby': ['rubocop'],
      \}

" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
nnoremap <silent> mec :<C-u>MerlinErrorCheck<CR>

" ## end of OPAM user-setup addition for vim / base ## keep this line
let g:python3_host_prog = expand('/Users/noguchimasato/.pyenv/shims/python3')

" denite
nnoremap [denite] <Nop>
nmap ,u [denite]
nnoremap <silent> [denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
nnoremap <silent> [denite]b  :<C-u>Denite buffer<CR>
nnoremap <silent> [denite]e  :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=+1 -immediately<CR>
nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=search-buffer-denite -select=-1 -immediately<CR>
nnoremap <silent> [denite]m :<C-u>Denite file_mru<CR>

" " deoplete
" let g:deoplete#omni_patterns = {}
" let g:deoplete#omni_patterns.ocaml = '.*'
" let g:deoplete#omni_patterns.ocaml = '[^ ,;\t\[()\]]'
" call deoplete#enable()

" neosnippet
let g:neosnippet#enable_completed_snippet = 1

" vim-flow
let g:flow#enable = 0
"Use locally installed flow
let local_flow = finddir('node_modules', '.;') . '/.bin/flow'
if matchstr(local_flow, "^\/\\w") == ''
    let local_flow= getcwd() . "/" . local_flow
endif
if executable(local_flow)
  let g:flow#flowpath = local_flow
endif
nnoremap t :<C-u>:FlowType<CR>

au User lsp_setup call lsp#register_server({
    \ 'name': 'sql-language-server',
    \ 'cmd': {server_info->['sql-language-server', 'up', '--debug', '--method', 'stdio']},
    \ 'whitelist': ['sql'],
    \ })
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_log_verbose = 1
let g:lsp_log_file = expand('~/vim-lsp.log')

" for asyncomplete.vim log
let g:asyncomplete_log_file = expand('~/asyncomplete.log')

" let g:LanguageClient_serverCommands = {
"     \ 'ruby': ['/Users/noguchimasato/src/lsp_test/lang'],
"     \ 'sql': ['sql-language-server', 'up', '--debug', '--method', 'stdio'],
"     \ }

" Automatically start language servers.
" let g:LanguageClient_autoStart = 1


" --- Markdown preview setting --- "
" set to 1, nvim will open the preview window after entering the markdown buffer
" default: 0
let g:mkdp_auto_start = 0

" set to 1, the nvim will auto close current preview window when change
" from markdown buffer to another buffer
" default: 1
let g:mkdp_auto_close = 1

" set to 1, the vim will refresh markdown when save the buffer or
" leave from insert mode, default 0 is auto refresh markdown as you edit or
" move the cursor
" default: 0
let g:mkdp_refresh_slow = 0

" set to 1, the MarkdownPreview command can be use for all files,
" by default it can be use in markdown file
" default: 0
let g:mkdp_command_for_global = 0

" set to 1, preview server available to others in your network
" by default, the server listens on localhost (127.0.0.1)
" default: 0
let g:mkdp_open_to_the_world = 0

" use custom IP to open preview page
" useful when you work in remote vim and preview on local browser
" more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
" default empty
let g:mkdp_open_ip = ''

" specify browser to open preview page
" default: ''
let g:mkdp_browser = ''

" set to 1, echo preview page url in command line when open preview page
" default is 0
let g:mkdp_echo_preview_url = 0

" a custom vim function name to open preview page
" this function will receive url as param
" default is empty
let g:mkdp_browserfunc = ''

" options for markdown render
" mkit: markdown-it options for render
" katex: katex options for math
" uml: markdown-it-plantuml options
" maid: mermaid options
" disable_sync_scroll: if disable sync scroll, default 0
" sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
"   middle: mean the cursor position alway show at the middle of the preview page
"   top: mean the vim top viewport alway show at the top of the preview page
"   relative: mean the cursor position alway show at the relative positon of the preview page
" hide_yaml_meta: if hide yaml metadata, default is 1
" sequence_diagrams: js-sequence-diagrams options
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {}
    \ }

" use a custom markdown style must be absolute path
let g:mkdp_markdown_css = ''

" use a custom highlight style must absolute path
let g:mkdp_highlight_css = ''

" use a custom port to start server or random for empty
let g:mkdp_port = ''

" preview page title
" ${name} will be replace with the file name
let g:mkdp_page_title = '?${name}?'
